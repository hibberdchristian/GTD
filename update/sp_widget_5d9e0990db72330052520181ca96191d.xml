<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($rootScope,$scope,spModal) {
	/* widget controller */
	var c = this;
	c.selectItem = function(sysId) {
		var id = sysId;
		console.log('Task ID: ' + id);
		$rootScope.taskID = id;
		$rootScope.$emit('selectTask', id);
	}

	c.newItem = function() {
		console.log('New Task');
		$rootScope.$emit('newTask');
	}

	c.newCategory = function() {
		console.log('New Category');
		$rootScope.$emit('newCategory');
	}
	
	c.deleteCategory = function(sysId,value) {
		spModal.confirm("Are you sure you want to delete this category? Any open tasks in this category will be moved to General.").then(function(confirmed){
			if(confirmed){
				var id = sysId;
				console.log('Remove Category Id: ' + id);
				c.server.get({
					action: 'deleteCategory',
					categoryID: id,
					categoryValue: value
				}).then(function(){
					location.reload();
				});
			}
		})
	}
	
	// Function to control fading on tasks on selection of users
	c.selectUser = function(assignee) {
		if (document.getElementById(assignee.name).classList.contains("active")) {
			document.getElementById(assignee.name).classList.remove("active");
		} else {
			document.getElementById(assignee.name).classList.add("active");
		}
		var activeUsers = [];
		for (i=0;i<document.getElementById('assignee-buttons').getElementsByClassName('active').length;i++) {
			activeUsers.push(document.getElementsByClassName('active')[i].id)
		}
		for (i=0;i<c.data.tasks.length;i++) {
			if (activeUsers.indexOf(c.data.tasks[i].assigned_to) != -1 || activeUsers.length == 0) {
				document.getElementById(c.data.tasks[i].sys_id).style.opacity = 1;
			} else {
				document.getElementById(c.data.tasks[i].sys_id).style.opacity = 0.4;
			}
		}
	}
	
	c.selectPriority = function(priority) {
		if (document.getElementById(priority).classList.contains("active")) {
			document.getElementById(priority).classList.remove("active");
		} else {
			document.getElementById(priority).classList.add("active");
		}
		var activePriorites = [];
		for (i=0;i<document.getElementById('priority-buttons').getElementsByClassName('active').length;i++) {
			activePriorites.push(document.getElementsByClassName('active')[i].id)
		}
		for (i=0;i<c.data.tasks.length;i++) {
			if (activePriorites.indexOf(c.data.tasks[i].priority) != -1 || activePriorites.length == 0) {
				document.getElementById(c.data.tasks[i].sys_id).getElementsByClassName('badge')[0].classList.add("p" + c.data.tasks[i].priority);
			} else {
				document.getElementById(c.data.tasks[i].sys_id).getElementsByClassName('badge')[0].classList.remove("p" + c.data.tasks[i].priority);
			}
		}
	}

	c.allowDrop = function(ev) {
		ev.preventDefault();
	}
	
	c.drag = function(ev) {
		ev.dataTransfer.setData("text",ev.target.id);
	}
	
	c.drop = function(ev) {
		ev.preventDefault();
		var data = ev.dataTransfer.getData("text");		
		if (!ev.target.getAttribute("ondrop")) {
			return false;
		}
		if(ev.target.id == 'dropzone') {
			spModal.confirm("Are you sure you want to mark this task as complete?").then(function(confirmed){
				if(confirmed){
					c.server.get({
						action: 'completeTask',
						taskID: data
					}).then(function(){
						location.reload();
					});
				}
			})
		} else {
			ev.target.appendChild(document.getElementById(data));
			c.server.get({
				action: 'moveTask',
				taskID: data,
				hostID: ev.target.id
			})
		}
	}

}]]></client_script>
        <controller_as>c</controller_as>
        <css>.badge {
  background-color: #d5dee0;
}
.p1 {
  color: #fff;
  background-color: #d9534f;
  border-color: #d43f3a;
}
.p2 {
  color: #fff;
  background-color: #f0ad4e;
  border-color: #eea236;
}
.p3 {
  color: #fff;
  background-color: #5cb85c;
  border-color: #4cae4c;
}
.icons {
	text-align: right;
}
.button {
  padding-top: 15px;
  padding-bottom: 15px;
  text-align: center;
}	
.card {
  border: solid;
  border-color: #ddd;
  border-width: 2px;
  padding: 0px;
  margin-bottom: 10px;
}
.card-body {
	padding: 6px 9px;
}
.swimlane {
  border: solid;
  border-color: #ddd;
  border-width: 2px;
  padding: 2px;
  margin-bottom: 5px;
}
.swimlane-body {
  overflow-y: scroll;
  height: 500px;
  padding: 5px
}
.row {
	padding-bottom: 15px;
}
.panel-heading {
  background-color: #00486D;
  color: #FFFFFF;
}
.nopadding {
	padding: 0px;
}
@media (hover: hover) {
  .glyphicon:hover {
    color: black;
  }
  .card-heading:hover {
    background-color: #858b8c;
  }
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>kanban_board</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Kanban Board</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	//create an array to populate without tasks
	data.tasks = [];
	data.categories = [];
	data.assignees = [];

	var categoryGR = new GlideRecord('sys_choice');
	categoryGR.addQuery('name','x_380098_gtd_tasks');
	categoryGR.addQuery('element','category');
	categoryGR.orderBy('sys_created_on');
	categoryGR.query();
	while (categoryGR.next()) {
		var categoryObj = {}
		categoryObj.label = categoryGR.getValue('label');
		categoryObj.value = categoryGR.getValue('value');
		categoryObj.sys_id = categoryGR.getUniqueValue();
		data.categories.push(categoryObj);
	}

	var queryString = 'assigned_to=' + gs.getUserID() + '^ORsys_created_by=' + gs.getUserName();
	var taskGR = new GlideRecord('x_380098_gtd_tasks');
	taskGR.addEncodedQuery(queryString);
	taskGR.addQuery('state','0');
	taskGR.orderBy('priority');
	taskGR.query();
	while (taskGR.next()) {
		var taskObj = {};
		//use service portal helper method to get some display values
		$sp.getRecordDisplayValues(taskObj, taskGR, 'title,category,assigned_to,sys_id');
		//get the first 20 characters of the description
		taskObj.description = taskGR.getValue('description').slice(0,400);
		taskObj.priority = taskGR.getValue('priority');
		//push the populated obj into the array
		data.tasks.push(taskObj);
	}
	
	// populate data.assignees to for use with the assinged_to buttons
	for (i=0;i<data.tasks.length;i++) {
		var assigneeObj = {};
		assigneeObj.name = data.tasks[i].assigned_to;
		assigneeObj.tasks = [data.tasks[i].sys_id];
		if(i==0) {
			data.assignees.push(assigneeObj);
		} else {
			for (j=0;j<data.assignees.length;j++) {
				if (data.tasks[i].assigned_to == data.assignees[j].name) {
					data.assignees[j].tasks.push(data.tasks[i].sys_id);
					break;
				} else {
					data.assignees.push(assigneeObj);
					break;
				}
			}
		}
	}

	if (input) {
		var taskUpdate = new GlideRecord('x_380098_gtd_tasks');
		var taskBulkUpdate = new GlideRecord('x_380098_gtd_tasks');
		var categoryUpdate = new GlideRecord('sys_choice');
		if (taskUpdate.get(input.taskID)) {
			if (input.action == 'completeTask') {
				taskUpdate.state = '1';
				taskUpdate.update(); 
			}
			else if (input.action == 'moveTask') {
				taskUpdate.category = input.hostID;
				taskUpdate.update();
			}
		}
		else if (categoryUpdate.get(input.categoryID)) {
			if (input.action == 'deleteCategory') {
				categoryUpdate.deleteRecord();
				taskBulkUpdate.addEncodedQuery(queryString);
				taskBulkUpdate.addQuery('category',input.categoryValue);
				taskBulkUpdate.query();
				taskBulkUpdate.setValue('category','0.0');
				taskBulkUpdate.updateMultiple();
			}
		}
	}

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-07-18 08:01:47</sys_created_on>
        <sys_id>5d9e0990db72330052520181ca96191d</sys_id>
        <sys_mod_count>624</sys_mod_count>
        <sys_name>Kanban Board</sys_name>
        <sys_package display_value="GTD" source="x_380098_gtd">f8b6f91fdb663300506da08a489619bc</sys_package>
        <sys_policy/>
        <sys_scope display_value="GTD">f8b6f91fdb663300506da08a489619bc</sys_scope>
        <sys_update_name>sp_widget_5d9e0990db72330052520181ca96191d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-08-08 09:58:31</sys_updated_on>
        <template><![CDATA[<div class="container-fluid" id="drag-and-drop">

  <script>
    //gets the angular scope
    function getScope() {
      return angular.element('#drag-and-drop').scope().c;
    }
  </script>

  <div class="row button">
    <div class="btn-group" role="group">
      <button type="button" class="btn btn-default" ng-click="c.newItem()">New Task</button>
      <button type="button" class="btn btn-default" ng-click="c.newCategory()">New Category</button>
    </div>
  </div>

  <div class="row button">
    <div class="btn-group" role="group" id="assignee-buttons">
      <button ng-repeat="assignee in data.assignees" type="button" class="btn btn-default" ng-click="c.selectUser(assignee)" id="{{assignee.name}}">{{assignee.name}}</button>
    </div>

    <div class="btn-group" role="group" id="priority-buttons">
      <button type="button" class="btn btn-default" ng-click="c.selectPriority('1')" id="1">P1</button>
      <button type="button" class="btn btn-default" ng-click="c.selectPriority('2')" id="2">P2</button>
      <button type="button" class="btn btn-default" ng-click="c.selectPriority('3')" id="3">P3</button>
    </div>
  </div>
  
    <div class="panel panel-default">
      <div class="panel-body text-center text-italic text-muted" id="dropzone" ondrop="getScope().drop(event)" ondragover="getScope().allowDrop(event)">
          <em>Drag here when done...</em> 
      </div> 
    </div>

  <div class="row grid">

    <div class="col-md-2 col-sm-3 col-xs-12 nopadding" ng-repeat="category in data.categories">

      <div class="swimlane panel panel-default ">

        <div class="panel-heading text-center">
          {{category.label}} 
        </div>

        <div class="swimlane-body panel-body" ondrop="getScope().drop(event)" ondragover="getScope().allowDrop(event)" id="{{category.value}}">

          <div ng-repeat="task in data.tasks | filter: {category:category.label}">

            <div class="card panel panel-default col-xs-12" id="{{task.sys_id}}" draggable="true" ondragstart="getScope().drag(event)">

              <div class="card-body panel-body" ng-click="c.selectItem(task.sys_id)">
                <div>
                  <span class="badge p{{task.priority}}">P{{task.priority}}</span>
                  <h5><strong>{{task.assigned_to}}</strong></h5>
                </div>
                <p>{{task.title}}</p>
              </div>
            </div>

          </div>
        </div>

      </div>

      <div class="row button">
        <span ng-show="category.label != 'General'" ng-click="c.deleteCategory(category.sys_id,category.value)" class="glyphicon glyphicon-trash" aria-hidden="true"></span>
      </div>

    </div>  

  </div>
</div>]]></template>
    </sp_widget>
</record_update>
